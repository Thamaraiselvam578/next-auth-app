generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone_number  String?
  last_name     String?
  street        String?
  city          String?
  state         String?
  country       String?
  zipcode       String?
  accounts      Account[]
  sessions      Session[]
  task          Task[]
  Post          Post[]
  comments      Comments[]
  notifications Notifications[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Task {
  id        Int      @id @default(autoincrement())
  task_name String
  due_date  DateTime
  completed Boolean  @default(false)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id           Int        @id @default(autoincrement())
  post_title   String
  post_content DateTime
  image        String?
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?
  comments     Comments[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Comments {
  id        Int      @id @default(autoincrement())
  comment   String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model Notifications {
  id        Int      @id @default(autoincrement())
  head      String
  body      String?
  createdBy Json
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
